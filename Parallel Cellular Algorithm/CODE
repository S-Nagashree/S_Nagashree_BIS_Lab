------------------------------------CODE--------------------------------------------
from google.colab import files
uploaded = files.upload()
import cv2
import numpy as np
from tqdm import trange

def edge_detection_pca(image_path, T_max=50, lam=0.2, p_mut=0.01):

    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if img is None:
        raise FileNotFoundError("Image NOT found. Check the path.")

    img = img.astype(np.float32) / 255.0

    N_rows, N_cols = img.shape
    Cell = img.copy()

    # Objective function
    def f(x):
        gx = cv2.Sobel(x, cv2.CV_32F, 1, 0, ksize=3)
        gy = cv2.Sobel(x, cv2.CV_32F, 0, 1, ksize=3)
        return -np.sqrt(gx**2 + gy**2)

    fitness = f(Cell)
    neighbors = [(-1,0),(1,0),(0,-1),(0,1)]

    for t in trange(T_max, desc="Running PCA Edge Detection"):
        x_new = Cell.copy()

        for i in range(1, N_rows-1):
            for j in range(1, N_cols-1):
                N_vals = [Cell[i+di, j+dj] for di, dj in neighbors]
                N_fit  = [fitness[i+di, j+dj] for di, dj in neighbors]

                best_idx = np.argmin(N_fit)
                best_val = N_vals[best_idx]

                if f(np.array([[best_val]]))[0,0] < fitness[i,j]:
                    diff = sum([(Cell[i+di,j+dj] - Cell[i,j]) for di,dj in neighbors])
                    x_new[i,j] = Cell[i,j] + lam * diff / 4.0

                if np.random.rand() < p_mut:
                    x_new[i,j] += np.random.normal(0,0.05)
                    x_new[i,j] = np.clip(x_new[i,j], 0, 1)

        Cell = np.clip(x_new,0,1)
        fitness = f(Cell)

    grad_mag = -fitness
    grad_mag = (grad_mag - grad_mag.min()) / (grad_mag.max() - grad_mag.min())
    edge_map = (grad_mag > 0.3).astype(np.uint8) * 255

    return edge_map
edges = edge_detection_pca("/content/chrome.jpg", T_max=30, lam=0.15, p_mut=0.02)

cv2.imwrite("/content/edges_pca.jpg", edges)
from google.colab.patches import cv2_imshow
cv2_imshow(edges)


